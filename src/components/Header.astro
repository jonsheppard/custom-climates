---
// src/components/Header.astro
import lightLogo from '../assets/images/icons/logos/custom-climates-logo-for-light-background.png';
import { getCollection } from 'astro:content';

const allEquipment = await getCollection('equipment');
const desiredOrder = ['climate-controlled-trailer', 'containers', 'office-container'];
const equipment = desiredOrder
  .map(slug => allEquipment.find(item => item.slug === slug))
  .filter((item): item is NonNullable<typeof item> => item !== undefined);
---
<header class="bg-gray-100 text-gray-900 shadow-sm relative z-50">
  <div class="container mx-auto px-4 py-3 flex justify-between items-center">
    <div class="flex items-center">
      <a href="/" class="flex items-center space-x-2">
        <img src={lightLogo.src} alt="Custom Climates Logo" class="h-10 sm:h-12 w-auto">
        <span class="text-sm sm:text-lg lg:text-xl font-semibold text-gray-900 font-high-speed brand-text">Custom Climates</span>
      </a>
    </div>
    
    <!-- Desktop Navigation -->
    <nav class="hidden lg:flex space-x-6">
      <!-- Equipment Dropdown -->
      <div class="relative group">
        <a href="/equipment" class="hover:text-[#0955A9] transition-colors font-medium flex items-center space-x-1">
          <span>Equipment</span>
          <svg class="w-4 h-4 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </a>
        <div class="absolute top-full left-0 mt-1 w-64 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
          <div class="p-2">
            {equipment.map((item) => (
              <a 
                href={`/equipment/${item.slug}`} 
                class="block px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 hover:text-[#0955A9] rounded-md transition-colors"
              >
                {item.data.title}
              </a>
            ))}
          </div>
        </div>
      </div>
      
      <a href="/process" class="hover:text-[#0955A9] transition-colors font-medium">Our Process</a>
      <a href="/about" class="hover:text-[#0955A9] transition-colors font-medium">About</a>
      <a href="/contact" class="hover:text-[#0955A9] transition-colors font-medium">Contact</a>
    </nav>
    
    <!-- Desktop CTA -->
    <div class="hidden lg:flex items-center">
      <a href="/contact" class="bg-[#0955A9] hover:bg-[#07448a] text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300 text-sm">
        Get Quote Now
      </a>
    </div>
    
    <!-- Mobile Menu Button -->
    <button id="mobile-menu-button" class="lg:hidden text-gray-900 focus:outline-none focus:ring-2 focus:ring-[#0955A9] rounded p-1" aria-label="Toggle menu">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden lg:hidden bg-gray-200 border-t border-gray-300">
    <div class="container mx-auto px-4 py-4 space-y-1">
      <!-- Equipment Section -->
      <div class="space-y-1">
        <button id="mobile-equipment-toggle" class="w-full text-left flex items-center justify-between text-gray-900 py-2 px-2 hover:text-[#0955A9] hover:bg-gray-300 rounded transition-colors font-medium">
          <span>Equipment</span>
          <svg class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        <div id="mobile-equipment-menu" class="hidden pl-4 space-y-1 border-l-2 border-gray-400 ml-2">
          {equipment.map((item) => (
            <a 
              href={`/equipment/${item.slug}`} 
              class="block text-gray-700 py-2 px-2 hover:text-[#0955A9] hover:bg-gray-300 rounded transition-colors text-sm"
            >
              {item.data.title}
            </a>
          ))}
        </div>
      </div>
      
      <a href="/process" class="block text-gray-900 py-2 px-2 hover:text-[#0955A9] hover:bg-gray-300 rounded transition-colors font-medium">Our Process</a>
      <a href="/about" class="block text-gray-900 py-2 px-2 hover:text-[#0955A9] hover:bg-gray-300 rounded transition-colors font-medium">About</a>
      <a href="/contact" class="block text-gray-900 py-2 px-2 hover:text-[#0955A9] hover:bg-gray-300 rounded transition-colors font-medium">Contact</a>
      <div class="pt-3 border-t border-gray-400">
        <a href="/contact" class="block bg-[#0955A9] hover:bg-[#07448a] text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300 text-center">
          Get Quote Now
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu functionality
  function initializeMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const equipmentToggle = document.getElementById('mobile-equipment-toggle');
    const equipmentMenu = document.getElementById('mobile-equipment-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', (e) => {
        e.preventDefault();
        mobileMenu.classList.toggle('hidden');
        
        // Update button icon
        const svg = mobileMenuButton.querySelector('svg path');
        if (svg) {
          if (mobileMenu.classList.contains('hidden')) {
            svg.setAttribute('d', 'M4 6h16M4 12h16m-7 6h7'); // Hamburger
          } else {
            svg.setAttribute('d', 'M6 18L18 6M6 6l12 12'); // X
          }
        }
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (
          target instanceof HTMLElement &&
          !mobileMenuButton.contains(target) &&
          !mobileMenu.contains(target)
        ) {
          mobileMenu.classList.add('hidden');
          const svg = mobileMenuButton.querySelector('svg path');
          if (svg) {
            svg.setAttribute('d', 'M4 6h16M4 12h16m-7 6h7'); // Hamburger
          }
        }
      });
    }

    // Equipment submenu toggle
    if (equipmentToggle && equipmentMenu) {
      equipmentToggle.addEventListener('click', (e) => {
        e.preventDefault();
        equipmentMenu.classList.toggle('hidden');
        
        // Rotate arrow
        const arrow = equipmentToggle.querySelector('svg');
        if (arrow) {
          arrow.classList.toggle('rotate-180');
        }
      });
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMobileMenu);
  } else {
    initializeMobileMenu();
  }</script> 
